[tool.poetry]
name = &quot;patchwork-cli&quot;
version = &quot;0.0.45&quot;
description = &quot;&quot;
authors = [&quot;patched.codes&quot;]
license = &quot;AGPL&quot;
readme = &quot;README.md&quot;
packages = [
    { include = &quot;patchwork&quot;, from = &quot;.&quot; }
]
classifiers = [
    &quot;Development Status :: 3 - Alpha&quot;,
    &quot;Environment :: Console&quot;,
    &quot;Intended Audience :: Developers&quot;,
    &quot;License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)&quot;,
    &quot;Operating System :: OS Independent&quot;,
    &quot;Programming Language :: Python :: 3&quot;,
    &quot;Programming Language :: Python :: 3.8&quot;,
    &quot;Topic :: Software Development :: Libraries :: Python Modules&quot;,
    &quot;Topic :: Software Development :: Quality Assurance&quot;,
    &quot;Topic :: Software Development :: Testing&quot;,
    &quot;Topic :: Utilities&quot;
]

[tool.poetry.dependencies]
python = &quot;^3.8&quot;
typing-extensions = &quot;^4.11.0&quot;
click = &quot;~8.1.0&quot;
openai = &quot;^1.13.3&quot;
tree-sitter-languages = &quot;~1.10.2&quot;
python-gitlab = &quot;^4.4.0&quot;
pygithub = &quot;~2.1.1&quot;
gitpython = &quot;~3.1.40&quot;
pydantic = &quot;~2.6.4&quot;
tiktoken = &quot;~0.6.0&quot;
libcst = &quot;~1.1.0&quot;
patched-code2prompt = &quot;0.2.0&quot;
pyyaml = &quot;^6.0.1&quot;
packageurl-python = &quot;~0.15.0&quot;
semver = &quot;~3.0.2&quot;
requests = &quot;~2.32.0&quot;
chardet = &quot;~5.2.0&quot;
attrs = &quot;~23.2.0&quot;
google-ai-generativelanguage = &quot;~0.6.7&quot;
anthropic = &quot;~0.31.2&quot;
rich = &quot;~13.7.1&quot;
chevron = &quot;~0.14.0&quot;
scikit-learn = &quot;^1.5.0&quot;
# pinning transitive dependencies
tree-sitter = &quot;~0.21.3&quot;
numpy = [
    { version = &quot;^1.26&quot;, python = &quot;^3.12&quot;, optional = true},
    { version = &quot;^1.24&quot;, python = &quot;^3.8, &lt;=3.11&quot;, optional = true}
]
pandas = [
    { version = &quot;^2.1.4&quot;, python = &quot;^3.12&quot;, optional = true},
    { version = &quot;^2.0.3&quot;, python = &quot;3.8, &lt;=3.11&quot;, optional = true}
]
scipy = [
    { version = &quot;^1.7.3&quot;, python = &quot;^3.12&quot;, optional = true},
    { version = &quot;^1.6.1&quot;, python = &quot;3.8, &lt;=3.11&quot;, optional = true}
]

# extras
# security
semgrep = {version = &quot;^1.51.0&quot;, optional = true}
owasp-depscan = {version = &quot;5.2.15&quot;, optional = true }

# rag
chromadb = {version = &quot;~0.4.24&quot;, optional = true }
sentence-transformers = {version = &quot;~2.7.0&quot;, optional = true }
# pinning transitive dependencies
torch = {version = &quot;~2.2.2&quot;, optional = true }
orjson = {version = &quot;~3.9.15&quot;, optional = true }

# notifications
slack-sdk = {version = &quot;~3.28.0&quot;, optional = true }

[tool.poetry.extras]
security = [&quot;semgrep&quot;, &quot;owasp-depscan&quot;]
rag = [&quot;chromadb&quot;, &quot;sentence-transformers&quot;, &quot;torch&quot;, &quot;orjson&quot;]
notifications = [&quot;slack-sdk&quot;]
all = [
    &quot;semgrep&quot;, &quot;owasp-depscan&quot;,
    &quot;chromadb&quot;, &quot;sentence-transformers&quot;, &quot;torch&quot;, &quot;orjson&quot;,
    &quot;slack-sdk&quot;,
]

[tool.poetry.group.dev.dependencies]
setuptools = &quot;*&quot;
poethepoet = { version = &quot;^0.27.0&quot;, extras = [&quot;poetry-plugin&quot;] }
mypy = &quot;^1.7.1&quot;
types-requests = &quot;~2.31.0&quot;
black = &quot;^24.3.0&quot;
isort = &quot;^5.13.2&quot;
autoflake = &quot;^2.3.1&quot;
pytest = &quot;^8.1.1&quot;
pytest-mock = &quot;^3.8.0&quot;
pytest-localserver = &quot;^0.8.1&quot;
datasets = &quot;^1.14.0&quot;

[build-system]
requires = [&quot;poetry-core&quot;]
build-backend = &quot;poetry.core.masonry.api&quot;

[tool.poetry.scripts]
patchwork = 'patchwork.app:cli'

[tool.poe.poetry_hooks]
#pre_build = &quot;mypy&quot;
post_update = &quot;lint&quot;

[tool.poe.env]
PROJ_PATH.default = &quot;patchwork&quot;
TEST_PATH.default = &quot;tests&quot;

[tool.poe.tasks]
#mypy = &quot;mypy ${PROJ_PATH}&quot;
lint = [
    {cmd = &quot;autoflake --recursive ${PROJ_PATH} ${TEST_PATH}&quot;},
    {cmd = &quot;isort ${PROJ_PATH} ${TEST_PATH}&quot;},
    {cmd = &quot;black ${PROJ_PATH} ${TEST_PATH}&quot;}
]

[tool.black]
target-version = ['py310']
line-length = 120

[tool.isort]
profile = &quot;black&quot;

[tool.autoflake]
in-place = true
remove-all-unused-imports = true
expand-star-imports = true
ignore-init-module-imports = true