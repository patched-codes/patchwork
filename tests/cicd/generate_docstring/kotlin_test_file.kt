package org.example

import java.sql.Connection
import java.sql.ResultSet
import kotlin.random.Random


/**
 * Returns the sum of two numbers as a Double.
 * 
 * @param a The first number of type T, which is a subtype of Number.
 * @param b The second number of type T, which is a subtype of Number.
 * @return The sum of 'a' and 'b' as a Double.
 */
fun <T : Number> aPlusB(a: T, b: T): Double = a.toDouble() + b.toDouble()


/**
 * Executes a given SQL query on a specified SQLite database connection and returns the result as a list of rows, 
 * where each row is represented by a list of column values.
 * 
 * @param db The database connection object used to run the query.
 * @param query The SQL query to be executed on the database.
 * @return A list of lists, where each inner list represents a row of the query result with column values.
 */
fun sqlite(db: Connection, query: String): List<List<Any?>> {
    db.createStatement().use { statement ->
        statement.executeQuery(query).use { resultSet ->
            val results = mutableListOf<List<Any?>>()
            val columnCount = resultSet.metaData.columnCount

            while (resultSet.next()) {
                val row = mutableListOf<Any?>()
                for (i in 1..columnCount) {
                    row.add(resultSet.getObject(i))
                }
                results.add(row)
            }
            return results
        }
    }
}


/**
 * Compares two items based on a key value generated by the specified key mapping function.
 * The function leverages a provided lambda to transform items to a comparable key
 * and then compares these keys.
 * 
 * @param keyMap A function that generates a Comparable key from an item of type T.
 * @param item1 The first item to be compared.
 * @param item2 The second item to be compared.
 * @return An integer indicating the comparison result: a negative integer if item1's key is less than item2's key,
 *         zero if they are equal, or a positive integer if item1's key is greater than item2's key.
 */
fun <T, R : Comparable<R>> compare(keyMap: (T) -> R, item1: T, item2: T): Int {
    return when {
        keyMap(item1) < keyMap(item2) -> -1
        keyMap(item1) > keyMap(item2) -> 1
        else -> 0
    }
}


/**
 * Generates a random string of alphabets with a specified length.
 * The string will include both uppercase and lowercase letters.
 * 
 * @param length The number of characters the generated string should have.
 * @return A random string consisting of alphabetic characters.
 */
fun randomAlphabets(length: Int): String {
    val charPool = ('a'..'z') + ('A'..'Z')
    return (1..length)
        .map { charPool[Random.nextInt(0, charPool.size)] }
        .joinToString("")
}