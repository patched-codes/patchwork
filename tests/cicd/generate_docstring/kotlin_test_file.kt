package org.example

import java.sql.Connection
import java.sql.ResultSet
import kotlin.random.Random


/**
 * Computes the sum of two numbers of type Number by converting them to Double.
 * 
 * @param a The first number to be added. Must be of a type that extends Number.
 * @param b The second number to be added. Must be of a type that extends Number.
 * @return The sum of a and b as a Double.
 */
fun <T : Number> aPlusB(a: T, b: T): Double = a.toDouble() + b.toDouble()


/**
 * Executes a SQL query on a given database connection and returns the result as a list of rows,
 * where each row is represented as a list of objects.
 * 
 * @param db The database connection to execute the query on.
 * @param query The SQL query to be executed.
 * @return A list of lists, where each inner list represents a row retrieved by the query, 
 *         and each element within the row list corresponds to a column value.
 */
fun sqlite(db: Connection, query: String): List<List<Any?>> {
    db.createStatement().use { statement ->
        statement.executeQuery(query).use { resultSet ->
            val results = mutableListOf<List<Any?>>()
            val columnCount = resultSet.metaData.columnCount

            while (resultSet.next()) {
                val row = mutableListOf<Any?>()
                for (i in 1..columnCount) {
                    row.add(resultSet.getObject(i))
                }
                results.add(row)
            }
            return results
        }
    }
}


/**
 * Compares two items of generic type T based on the values produced by a key mapping function.
 * The comparison uses the natural ordering of the values returned by the key map function.
 *
 * @param <T> the type of the items to be compared
 * @param <R> the type of the keys generated by the keyMap function, must be comparable
 * @param keyMap a function that extracts a comparable key from the item
 * @param item1 the first item to compare
 * @param item2 the second item to compare
 * @return an integer that indicates the relative order of the items: 
 *         -1 if item1 is less than item2, 
 *          1 if item1 is greater than item2,
 *          0 if they are equal
 */
fun <T, R : Comparable<R>> compare(keyMap: (T) -> R, item1: T, item2: T): Int {
    return when {
        keyMap(item1) < keyMap(item2) -> -1
        keyMap(item1) > keyMap(item2) -> 1
        else -> 0
    }
}


/**
 * Generates a random string of specified length consisting of alphabetic characters.
 * Both lowercase ('a' to 'z') and uppercase ('A' to 'Z') letters are included in the pool.
 * 
 * @param length The length of the random alphabetic string to be generated.
 * @return A random string made up of alphabetic characters with the given length.
 */
fun randomAlphabets(length: Int): String {
    val charPool = ('a'..'z') + ('A'..'Z')
    return (1..length)
        .map { charPool[Random.nextInt(0, charPool.size)] }
        .joinToString("")
}